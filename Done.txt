Create CukesPlus project structure.



* Process the regex intelligently by applying any method types to the snippets.



* Set system property "com.replicanet.cukesplus.server.featureEditor" to start the web based feature file editor.
* Add a system property option to produce a HTML report file, in the target directory, of known feature files from the command line arguments.
	Then start ACEServer with that file.
	The report file would contains URLs in the form: demo/autocompletion.html?filename=t1.feature
	This would allow editing of files known to the framework


* Added ACEServerCallback to create the file list html page after a file is saved.


* Added feature file line highlighting based on previous run test results.
 	target/report*.json files are scanned for any matching URIs to feature files being viewed in the ACEServer



* Add appropriate ACEServerCallback.beforeGet() callback responses to URLs with extensions ".run.file", ".run.suite" and ".clear.results"
	Will need to check the run requests are synchronously executed with suitable command line parameters.



* Handle Examples table in "test.feature" so the relevant line in the table is highlighted with the test result



* Remove any duplicate report line states



* Report Scenario Outline examples table results as well as the scenario result



* Fixed escaped regex "\(" and "\)" sequences



* When running a file or a suite an external test framework process is started.



* Added syntax hints with and without the keyword to improve hint matching choices.



* Added run selection/current line request



* If feature file is executed from the feature editor with line filters line any tag filters are removed from the command line before starting the test run



* Added a quick demonstration of using JavaScript injected into the web page under test to record mouse/key events and then adding those steps to the feature file being edited.




* Bug: Feature editor target/fileList.html should only really be updated by the main process, probably when fetching the file list html
	It shouldn't be updated when running the tests as the file list is then reduced to only that file being executed
	>> buildFileList(argv); should have only been in the feature server start



* Consider updating cucumber, then adding macros
	When a syntax method is called, check to see if a new syntax method can be called from a text string, or text block for tables, that gets emitted to the scenario report
	If yes, it might be possible to intercept method search and execution and replace with macro execution, that is recursive
		Perhaps cucumber.runtime.Runtime.runStep
			This does get access to all the instances: String featurePath, Step step, Reporter reporter, I18n i18n
		Or cucumber.runtime.model.StepContainer.runSteps
		Perhaps add a new cucumber.runtime.StepDefinition derived step execution method...
			Which is created before "GlueProcessor.processGlue(runtime);" is run
			Create new step derived class, like cucumber.runtime.java.JavaStepDefinition.JavaStepDefinition
				pattern = ^open the web page "([^"]*)"$
				Or perhaps like: cucumber.runtime.java.JavaBackend.addStepDefinition(java.lang.annotation.Annotation, java.lang.reflect.Method)
				Which arrives via: cucumber.runtime.java.JavaBackend.loadGlue(cucumber.runtime.Glue, java.util.List<java.lang.String>)
					Which is Runtime.glue
		When it is parsing events and adding them before execution: gherkin.formatter.FilterFormatter.replayEvents
			Step.rows is already parsed as a list of DataTableRow objects
		This adds a found step to the list to execute: cucumber.runtime.model.StepContainer#step
	>> See: new MacroStepDefinition
		Given this is a macro test with one parameter "hello"
	>> Note when there is a string value: gherkin.formatter.model.Step#doc_string
	>> Note when there is a data table: gherkin.formatter.model.Step#rows
	>> com.replicanet.cukesplus.ExtensionRuntime.runMacroStep will need to be recursive call aware and duplicate the functionality in cucumber.runtime.Runtime#runStep
		>> Look for: ExtensionRuntime.runtime.runMacroStep
		But be careful not to have re-enterant problems with stopWatch etc
		Or perhaps alternatively it could just add the Step to a list based on the "macro definition"
			Then runStep can retire all of those extra calls...?
				Would also need to be careful with recursion...
				>> Problem with the retireMacroSteps() approach. The report printers get out of sync when steps are added, which causes issues with definitions and arguments not matching
	>> I think macros are going to have to be expanded earlier, during parsing of feature files for example...
		During? new Step.Builder(this.stash.comments, keyword, name, line);
		gherkin.parser.FormatterListener
		gherkin.formatter.model.Step.Builder#replay
		gherkin.parser.FormatterListener.replayStepsOrExamples
		>> Perhaps the whole gherkin file data can be intercepted at or before:
			gherkin.parser.Parser#parse
				this.lexer.scan(gherkin)
			cucumber.runtime.FeatureBuilder.parse
	>> Trying to avoid AspectJ, but it might be needed
		First call to: gherkin.lexer.En#scan
			Contains syntax data
		Next call(s) to: gherkin.lexer.En#scan
			Contains Feature file data
			The next intercept point is probably at: gherkin.parser.Parser#parse
		The addition of runtime syntax MacroStepDefinition can still happen, it's just that these steps do nothing except perhaps are useful during reporting of indentation levels?
			Or other similar debug in the output report...
			Or... ClassLoader intercept the gherkin.parser.Parser#parse
				https://www.mojohaus.org/aspectj-maven-plugin/examples/weaveJars.html
				Or even: gherkin.lexer.I18nLexer#scan
				https://www.baeldung.com/spring-aop-pointcut-tutorial
		>> #include "../macros/test4.macro"
			Feature: Test 1
		>> com.replicanet.cukesplus.FeatureProvider#getFeature
		>> com.replicanet.cukesplus.FeatureMacroProcessor#processMacroFile
		>> Debug data mapping...
		>> Initial feature macro enrichment seems to work.
		>> https://stackoverflow.com/questions/45673978/aspectj-change-value-of-method-parameter
		* Done: Need --glue by for macro paths so the command line parameters don't get lost in the feature server
			>> --glue macros
		* Now need to add: runtime.getGlue().addStepDefinition
			I think the code inside: cucumber.runtime.java.ExtractJavaStepDefinitionMembers.extractMethod
			Specifically: cucumber.runtime.java.MacroStepDefinition.getMethodCopy
			I don't think it needs to call leafCopy, just update the members with new data
			This step is empty, of course
		* Done: Also map back line numbers for executed features to any errors for the web interface
			* // Look for match in the report for the file we are interested in seeing debug information for
				reportUri=features/subDir/test4.feature
			* Need to hook earlier than gherkin.lexer.I18nLexer.scan to get the filename, then create mapping from filename to debug info
				>> gherkin.parser.Parser#parse would be a good candidate since it includes featureURI
				>> Now have com.replicanet.cukesplus.ExtensionRuntime.featureURIToProcessedFeature
				>> Inside handleFeatureDebugJson
					Needs: FileUtils.writeStringToFile(new File(makeSafeName(featureURI)), feature);
						Because the feature is really processed in the separate process
		* Done: "##__#__## " is used to denote an expanded macro, the last pass just before execution should be to remove that and allow the original macro step (which should do nothing) to be emitted into the report
			>> Note commented out, will be needed: feature = feature.replace("##__#__## " , "");
			* Need to escape, make the string literal: https://www.baeldung.com/java-regexp-escape-char
				Pattern.quote(String S)
		* Done: Hmm, the syntax report is only showing one (the first) result of: runtime.getGlue().addStepDefinition(new MacroStepDefinition(
			It seems there is a duplicate check failing somewhere?
			Although if I add both faker macros and add to the scenario, the feature does execute OK...
			>> So, perhaps the processed glue can be added to the GlueProcessor.processGlue() report in a different way, without needing to pull from the runtime?
				** Update: cucumber.runtime.java.ExtractJavaStepDefinitionMembers.extractMethod
					To get the info it needs from the different class without reflection bodges
					** Remove section for: MacroStepDefinition macroStep = (MacroStepDefinition) step;
						Remove reflection access bodges...
					** Handle returned null in: cucumber.api.StepDefinitionReporter.stepDefinition
					** Instead add a new way to do: glueMap.put(
						> Checks what kind of data it adds...
						> com.replicanet.cukesplus.FeatureMacroProcessor#processMacroFile can then add the extra information
						> Make sure glueMap.put checks for duplicate entries before adding, we want to prioritise processMacroFile results
							processMacroSyntaxToGlue
			* Done: Two parameters generates: cucumber.runtime.StepDefinitionMatch.arityMismatch(
				>> A couple of options.
					> How does Cucumber handle varargs "..." steps?
						Trace construction of: cucumber.runtime.java.JavaStepDefinition.JavaStepDefinition
						Varargs doesn't work...
					> Or how about matching the number of parameters based on the expectation?
						Investigate: cucumber.runtime.StepDefinitionMatch#transformedArgs
							Where it does: Integer parameterCount = this.stepDefinition.getParameterCount();
							>> I think at this point, we intercept: cucumber.runtime.StepDefinitionMatch#runStep
								And if this.step == typeof MacroStepDefinition
									>>> Then just skip the entire method :)




* Bug: Syntax report missing "Given" for test1.macro: * this is a step definition with a simple parameter for * in * middle
	macro.keyword wasn't being initialised is all flows




* Feature macro processing.
	For example given the macro feature file:
		Feature: foo
			Scenario: foo2
				Given I do this 4 times for *
				Given I do this 4 times for * again
				And I do that 8 times
				And I wibble 2 this 3 times

	And the macro file:
		# A comment, with a simple macro definition just using stars as replacements for (.*) regex
		# $1 $2 etc are numbered parameters for the * parameters defined in the macro
		# Note the double \* will escape the * so that it isn't treated as a parameter
		Given I do this * times for \*
			* it expands to this
			* also expands to $1

		# A variant on the above is to supply named parameters, note the named paramters starts with '$'
		Given I do this * times for \* again
		$first
			* it expands to this
			* also expands to $first

		# A variant on the above where it uses java syntax for the step definition and regex
		@Given("^I do that (.*) times$")
			# Any line without a Given, When, Then, And or * step keyword will be output with * automatically
			does this and $1 that
			* also uses this $ parameter

		# Another variant on the above is to specify named parameters, also like the simple named paramaters example above
		# The parameter is referenced by adding the name to the $ in the step
		@Given("^I wibble (.*) this (.*) times (.*)$")
		$first $second
		# Note the third named parameter is on a new line without indentation
		$third
			* also uses this $first parameter
			# Numbers can still be used to index the parameters
			* also uses this $2 parameter



* Check that JUnit execution with CucumberPlus is able to process macros "as glue"




* When a feature has lots of macros and there is an option to execute a feature file with line numbers, then those line numbers will need mapping forward to the resultant processed feature file...
	Processing seems to be done in: cucumber.runtime.model.CucumberFeature#loadFromFeaturePath
	Probably best here: PathWithLines pathWithLines = new PathWithLines(featurePath);
	Constructor: cucumber.runtime.model.PathWithLines
	>> AspectJ hook: thePathWithLines
		>> com.replicanet.cukesplus.ExtensionRuntime.ExtensionFeatureProvider#doProcessPathWithLines



* Also preserve "undefined" to show undefined steps within a macro on the correct feature file line.




* Indentation of macros in final report...
	* The macro processing needs to add macro depth to the debug. Just after lines like this: #>>> 13
		>> internalProcessFeatureFile
			Perhaps maintain a depth in this method and output that for every macro expansion?
			>> Now this comment outputs depth: "#>>> macro file line , depth"
	* Need to add indentation to the report json
		>> gherkin.formatter.Reporter
		>> Could this indentation be hacked into the reported step by the caller to the report class?
			Perhaps the Match
		>> When processing, if a comment is "#>> " or "#> " then reset the depth, only use the depth when "#>>> xx , depth" is encountered
		>> In the output json look for: MacroStepDefinition.fake which is output by cucumber.runtime.java.MacroStepDefinition.getLocation
			> Unfortunately this is not used during the report generation, it is used during test execution
		>> Note:
			gherkin.formatter.JSONFormatter
			cucumber.runtime.formatter.HTMLFormatter
		>> It seems that gherkin.formatter.model.BasicStatement.keyword could be indented...
			Where is it creating that? Does it have access to the feature debug at that point?
				Yes it does!
				Unfortunately using the debugger to prefix the keyword with whitespace does not result in indented display in the HTML, but the json does contain indentation
				Using non-whitespace ">>" does show in the HTML report however...
				The HTML report does contain the keyword text verbatim, including the whitespace...
				However the span style seems to discard prefix whitespace, ignore horizontal margins basically: https://stackoverflow.com/questions/11685897/how-to-apply-space-in-span-element
				This fixes the style in the browser debugger: white-space: pre;
					In: .cucumber-report .keyword in style.css
				Also cucumber.runtime.formatter.HTMLFormatter.step seems to be escaping "&nbsp;" in the output HTML
				>> Although using "\u00A0" in the debugger for "keyword" seems to work!
				>> So create something that alters the parameters for BasicStatement()
					Actually gherkin.formatter.model.Step would be better...
		>> AspectJ interception theBasicStatementNew adds "\u00A0" indentation to the step keyword
		* TODO: Reusing the <details> optional expansion seems like a good style choice in the report, but it seems to be quite finicky to use...




* Where MacroStepDefinition is created, add the corresponding glueMap key value as a value returned by MacroStepDefinition.getLocation()
	e.g.
	"location": "MacroStepDefinition.Macro.test6._this_is_a_macro_test_with_two_parameters__________and__________() in file:macros\\test6.macro"




* Editor: When reporting test run errors, it should be possible to open the macro file and see which lines were reported red
	Because the execution report includes macro file line references
	Also featureURIToProcessedFeature files contain lines that flag where the macro file and line is. e.g. "#>> 12 : macros\test6.macro"
		Also #>>> is the line in the macro file previously flagged by #>>
	Similar to: handleFeatureDebugJson
	>> TODO: Needs implementation for handleMacroDebugJson
	> Needs to find and parse json for: "steps"
		Note: "status", giving priority to: "failed" "pending" "undefined".
			There may be more than one status for a line in a macro file, due to macros being used more than once in scenarios.
		And any containing: "comments"
		Match requesting url with path in the debug, make \ and / consistent...
			"value": "#\u003e\u003e 5 : macros\\test6.macro"
			This is: #>>
			>> Note line number
				Then note any following line number: "value": "#\u003e\u003e\u003e
				This is: #>>>




* Move selenium glue into core and rename the syntax to be more sensible




* Property (variables) expansion, call explicit parameter parsing method
	PropertiesResolution and PropertiesResolutionTest
	>> e.g. used by SeleniumGlue step methods:
		import com.replicanet.cukesplus.PropertiesResolution;
		text = PropertiesResolution.resolveInput(scenario, text);




* Created the annotation class CucumberPlusOptions for JUnit test runner class options




* Macro feature processing, should not add a comment before "Scenario:" if there are @tags




* https://github.com/martinpiper/BDD6502/issues/16
	Can macros accept raw strings as parameters?
	As a test author, I would like to use a multi-line string block ("""<lines of stuff>""") or multi-line table (| table of foo |) as a parameter into a macro.
	* Currently macros just expand (or insert depending on your point of view) steps into a feature file to be executed.
	* The last step in a macro will see the text block or table inserted after it.
	** Text block and table insertion into a specific point can be implemented by having a macro directive such as "<<<" or "<<< number of rows"
		> The number of rows can also be a resolved property based value. e.g. <<< ${test.insert.rows}



* Indicate how many properties were loaded from property: com.replicanet.cukesplus.default.properties




* Conditional syntax.
	> Allows the execution state to be set. To allow expansion of conditional syntax.
		See: getAllowRunStep
	> Can output "Skipped"
	>> TestGlue.Conditional
	See: cukesplus-core/src/test/resources/features/Conditional.feature




* Selenium syntax expanded to include text and attribute fetch using web element locator.




* Add property "test.cukesplus.step.line" to indicate the line number of the current step being executed.
