* TODO items :)

* Scenario Outline could do with an automatic property that is set for the row number being executed from the Examples table
	Or the current table line number
	Or the current scenario test index which couints for each scenario




* File binary identical syntax




* Debug printing for macro file parsing is displayed before the copyright banner...
	Info: Processing macros\test1.macro
	Info: Processing macros\test6.macro
	CukesPlus starting : (C) 2015 Replica Software : www.replicasoftware.com
	JUnit and Main entry point behave the same. Add an early check to display the banner once at init...
		There may or may not be macros to be parsed, for example.




* Macro feature processing uses a temporary file. Use memory based processing to make it faster



* To run editor test will need:
	* Enhancements to handleRunSuite to add java command line options after the initial properties are passed in
		* To start the web editor, perhaps with a different port number or let it choose and report the port...
		* Then use the port in the URL to open
		* This would need the ability to extract the port info from the process output
	* To run without waiting for the exit status
	* To add the ability to trap the new task output
	* Syntax to create a new directory or empty an existing directory
	* Syntax to wait for certain task output
	* Syntax to read CSS style for certain elements (located by text in the xpath by provided by a property remapping) to a property
	* Syntax to validate the equality/inequality of values, which obviously could use properties
	>> C:\Work\CukesPlus\cukesplus-core\src\test\resources\features\Editor.feature



* Editor needs test to create new suite from scratch
	Can be used for other editor tests without altering the main code tests




* Web editor needs tests for line colour highlighting
	Passing
	Unimplemented
	Error
	Skipped



* Editor needs tests for line number execution
* Editor needs tests for file execution
* Editor needs tests for suite execution



* Needs test for adding macro syntax
	* Check adding macro syntax results in new drop down hint
	* Test syntax report generation




* Macro expansion, loop
	Can expand properties available at the start of execution




* Use the Cucumber snippet generator to improve the code hints for the web editor
	https://github.com/cucumber/cucumber-jvm/blob/20db608a5535850139ba25fcdb9be3ae46991855/core/src/main/java/cucumber/runtime/snippets/SnippetGenerator.java
These escape patterns need handling if they don't appear in a capture group: "\\\\" "\\$" "\\(" "\\)" "\\[" "\\]" "\\?" "\\*" "\\+" "\\." "\\^"


* Need to add MSVC compatible error output so the IDE can work with F4 to move to the next build/test error in the feature/macro


* Add a list of potential values that can be used for regex sections (either paramters/capture groups or other regex areas)
	Can bew retrieved from the regex itself or comments in the step definition



* Add pom exec test for command line: --glue TestGlue features
	Use the pom to execute the above command line as part of the test phase and verify the results.



* For ACEServer project write the regex information to "target/gherkin-steps.js" in the following format:
This is to enable the ACE browser editor to pickup changing regex for feature file authoring.
	// Steps that can be used for gherkin
	var simplePotentials = [
	"Given I have a 6502 machine",
	"When I assemble this file *"
	];

	// Note: The indentation for snippets must be tabs not spaces!
	var complexPotentials = "\
	snippet Then the memory at address is value\n\
		Then the memory at ${1:address} is ${2:value}\n\
	";



* Obtain method parameter names http://stackoverflow.com/questions/2237803/can-i-obtain-method-parameter-name-using-java-reflection
** Added com.replicanet.cukesplus.GlueProcessor.getParameterNames(Method method) which uses java.lang.reflect.Parameter.isNamePresent()



* Add a mapping file that schedules tests based on changes from source control.
	Based on source control code changes or referenced JIRAs, automate the selection and prioritization of tests and any dependencies.
	For example of source control changes indicate that source file in certain paths change then map these to execute certain feature files first and/or apply tag filters.
	With realtime report generation this will help indicate significant problems in lengthy continuous integration build and test run cycles.
	Giving more timely reports to developers will help shorten the time between test failure reports and code fixes.



* Spot text areas and tables and output suitable snippets.



* Generate syntax hints or at the very least if they don't exist return back syntax hints with a message telling the user to run once and refresh the page.




* Find a better default report:
	** HTML
	** Trend report
	** Elastic search data submission
	>> https://cucumber.io/docs/cucumber/reporting/?lang=java
		Elastic search : https://github.com/AshisRaj/cucelastic-maven-plugin
		HTML : https://mvnrepository.com/artifact/net.masterthought/cucumber-reporting
		HTML : https://github.com/damianszczepanik/cucumber-reporting/tree/master
			http://damianszczepanik.github.io/cucumber-html-reports/overview-features.html




* Then property "test.tape.off.iterations2" is set to string "$${test.tape.off.iterations}a"
    This causes an endless loop?...
